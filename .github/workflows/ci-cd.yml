name: CI/CD to Cloud

on:
  push:
    branches: [ div ]
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Deploy to AWS or Azure?'
        required: true
        default: 'azure'
        type: choice
        options:
        - aws
        - azure

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/assetrix-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r assetrix/requirements.txt
          pip install pytest
      - name: Run tests
        run: |
          python -m pytest assetrix/unitest_app.py -v

  build-and-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} ./assetrix
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'

  push-to-registry:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} ./assetrix
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: push-to-registry
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init & Apply (Azure)
        if: ${{ github.event.inputs.cloud_provider == 'azure' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd infra/azure
          terraform init
          terraform apply -auto-approve -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" -var="dockerhub_token=${{ secrets.DOCKERHUB_TOKEN }}" -var="docker_image=${{ env.IMAGE_NAME }}" -var="image_tag=${{ github.sha }}" -var="ssh_public_key=${{ secrets.VM_SSH_PUBLIC_KEY }}"
